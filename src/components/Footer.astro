---
type Props = {
  data: {
    ctaHeading: string;
  };
};

const { data } = Astro.props;
---

<>
  <div class="relative h-screen">
    {
      Array.from({ length: 9 }).map((_, idx) => (
        <div class={`mask absolute left-0 top-0 h-full w-full bg-[url('/assets/cta.jpg')] bg-contain bg-center bg-no-repeat mask-${idx + 1}`} />
      ))
    }
  </div>
  <div class="container">
    <!-- <p class="py-20 text-9xl font-bold">{data.ctaHeading}</p> -->
    <div class="py-20 text-9xl font-bold">
      {
        data.ctaHeading.split("").map((char) => {
          if (char === " ") {
            return <span class="foo-foo inline-block">&nbsp;</span>;
          }
          return <span class="foo-foo inline-block">{char}</span>;
        })
      }
    </div>
  </div>
  <div class="h-screen"></div>
</>

<script>
  const initialClipPath = [
    "polygon(0% 0%, 0% 0%, 0% 0%, 0% 0%)",
    "polygon(33% 0%, 33% 0%, 33% 0%, 33% 0%)",
    "polygon(66% 0%, 66% 0%, 66% 0%, 66% 0%)",
    "polygon(0% 33%, 0% 33%, 0% 33%, 0% 33%)",
    "polygon(33% 33%, 33% 33%, 33% 33%, 33% 33%)",
    "polygon(66% 33%, 66% 33%, 66% 33%, 66% 33%)",
    "polygon(0% 66%, 0% 66%, 0% 66%, 0% 66%)",
    "polygon(33% 66%, 33% 66%, 33% 66%, 33% 66%)",
    "polygon(66% 66%, 66% 66%, 66% 66%, 66% 66%)",
  ];

  const finalClipPath = [
    "polygon(0% 0%, 33.5% 0%, 33.5% 33%, 0% 33.5%)",
    "polygon(33% 0%, 66.5% 0%, 66.5% 33%, 33% 33.5%)",
    "polygon(66% 0%, 100% 0%, 100% 33%, 66% 33.5%)",
    "polygon(0% 33%, 33.5% 33%, 33.5% 66%, 0% 66.5%)",
    "polygon(33% 33%, 66.5% 33%, 66.5% 66%, 33% 66.5%)",
    "polygon(66% 33%, 100% 33%, 100% 66%, 66% 66.5%)",
    "polygon(0% 66%, 33.5% 66%, 33.5% 100%, 0% 100%)",
    "polygon(33% 66%, 66.5% 66%, 66.5% 100%, 33% 100%)",
    "polygon(66% 66%, 100% 66%, 100% 100%, 66% 100%)",
  ];

  const masks = document.querySelectorAll(".mask") as NodeListOf<HTMLDivElement>;
  masks.forEach((mask, idx) => {
    gsap.set(mask, { clipPath: initialClipPath[idx] });
  });
  const tl = gsap.timeline({
    scrollTrigger: {
      trigger: masks[0].parentElement,
      start: "top 50%",
    },
  });
  const animationOrder = [[".mask-1"], [".mask-2", ".mask-4"], [".mask-3", ".mask-5", ".mask-7"], [".mask-6", ".mask-8"], [".mask-9"]] as string[][];
  animationOrder.forEach((animationItems, index) => {
    tl.to(
      animationItems,
      {
        clipPath: (i, el) => finalClipPath[Array.from(masks).indexOf(el as HTMLDivElement)],
        duration: 0.5,
        stagger: 0.1,
        ease: "power2.out",
      },
      index * 0.125
    );
  });

  const charsFoo = document.querySelectorAll(".foo-foo") as NodeListOf<HTMLElement>;
  gsap.fromTo(
    charsFoo,
    {
      opacity: 0,
      skewX: -20,
      willChange: "filter, transform",
      filter: "blur(8px)",
    },
    {
      ease: "sine",
      opacity: 1,
      skewX: 0,
      filter: "blur(0px)",
      stagger: 0.04,
      scrollTrigger: {
        trigger: ".foo-foo",
        start: "top 80%",
        end: "bottom 35%",
        scrub: true,
      },
    }
  );
</script>
